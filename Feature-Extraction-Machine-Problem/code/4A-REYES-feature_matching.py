# -*- coding: utf-8 -*-
"""feature_matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-U8EK6ArPnY25XfZwHGBmwEqwC3_-sbV

# Module 2.0: Feature Extraction and Object Detection
"""

# BRUTE-FORCE MATCHER FUNCTION
def brute_force_matcher(descriptors1, descriptors2, norm_type, keypoints1, keypoints2, img1, img2, title):
    # Create BFMatcher object
    bf = cv2.BFMatcher(norm_type, crossCheck=True)

    # Match descriptors
    matches = bf.match(descriptors1, descriptors2)

    # Sort them in the order of their distance
    matches = sorted(matches, key=lambda x: x.distance)

    # Draw matches
    img_matches = cv2.drawMatches(img1, keypoints1, img2, keypoints2, matches[:50], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

    # Display the matches
    plt.figure(figsize=(12, 6))
    plt.imshow(cv2.cvtColor(img_matches, cv2.COLOR_BGR2RGB))
    plt.title(f"Brute-Force Matcher: {title}")
    plt.show()

# Brute-Force for SIFT (float descriptors)
brute_force_matcher(descriptors1_sift, descriptors2_sift, cv2.NORM_L2, keypoints1_sift, keypoints2_sift, image1, image2, "SIFT")

# Brute-Force for SURF (float descriptors)
brute_force_matcher(descriptors1_surf, descriptors2_surf, cv2.NORM_L2, keypoints1_surf, keypoints2_surf, image1, image2, "SURF")

# Brute-Force for ORB (binary descriptors)
brute_force_matcher(descriptors1_orb, descriptors2_orb, cv2.NORM_HAMMING, keypoints1_orb, keypoints2_orb, image1, image2, "ORB")

# FLANN Matcher Function for SIFT/SURF
def flann_matcher(descriptors1, descriptors2, keypoints1, keypoints2, img1, img2, title):
    # FLANN parameters for floating-point descriptors (KDTree)
    FLANN_INDEX_KDTREE = 1
    index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
    search_params = dict(checks=50)  # Higher 'checks' improves precision but slows down matching

    # Create the FLANN matcher
    flann = cv2.FlannBasedMatcher(index_params, search_params)

    # Match descriptors using FLANN Matcher
    matches = flann.knnMatch(descriptors1, descriptors2, k=2)

    # Apply Lowe's ratio test
    good_matches = []
    for m, n in matches:
        if m.distance < 0.7 * n.distance:
            good_matches.append(m)

    # Draw matches
    img_matches_flann = cv2.drawMatches(img1, keypoints1, img2, keypoints2, good_matches, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

    # Display the matches
    plt.figure(figsize=(12, 6))
    plt.imshow(cv2.cvtColor(img_matches_flann, cv2.COLOR_BGR2RGB))
    plt.title(f"FLANN Matcher: {title}")
    plt.show()

# FLANN Matcher for SIFT
flann_matcher(descriptors1_sift, descriptors2_sift, keypoints1_sift, keypoints2_sift, image1, image2, "SIFT")

# FLANN Matcher for SURF
flann_matcher(descriptors1_surf, descriptors2_surf, keypoints1_surf, keypoints2_surf, image1, image2, "SURF")