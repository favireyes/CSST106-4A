# -*- coding: utf-8 -*-
"""image_alignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14xR1KNm0_9HKdNdHY_qoPTh57Y4Ka70D

# Module 2.0: Feature Extraction and Object Detection
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the two images
image1 = cv2.imread('/content/zhang hao.jfif')
image2 = cv2.imread('/content/zhang hao 1.jfif')

# Convert both images to grayscale
gray_img1 = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
gray_img2 = cv2.cvtColor(image2, cv2.COLOR_BGR2GRAY)

# Step 1: Detect keypoints and compute descriptors using SIFT
sift = cv2.SIFT_create()
keypoints1, descriptors1 = sift.detectAndCompute(gray_img1, None)
keypoints2, descriptors2 = sift.detectAndCompute(gray_img2, None)

# Step 2: Match the descriptors using Brute-Force Matcher
bf = cv2.BFMatcher(cv2.NORM_L2)
matches = bf.knnMatch(descriptors1, descriptors2, k=2)

# Step 3: Apply Lowe's ratio test to filter good matches
good_matches = []
for m, n in matches:
    if m.distance < 0.7 * n.distance:
        good_matches.append(m)

# Minimum number of matches to compute homography
MIN_MATCH_COUNT = 10
if len(good_matches) > MIN_MATCH_COUNT:
    # Step 4: Get the keypoints from the good matches
    src_pts = np.float32([keypoints1[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
    dst_pts = np.float32([keypoints2[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)

    # Step 5: Compute the homography matrix using cv2.findHomography
    H, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)

    # Step 6: Warp one image onto the other using the homography matrix
    height, width, channels = image2.shape
    warped_img1 = cv2.warpPerspective(image1, H, (width, height))

    # Step 7: Display the aligned (warped) image
    plt.figure(figsize=(10, 8))
    plt.subplot(1, 2, 1)
    plt.imshow(cv2.cvtColor(image1, cv2.COLOR_BGR2RGB))
    plt.title("Original Image 1")

    plt.subplot(1, 2, 2)
    plt.imshow(cv2.cvtColor(warped_img1, cv2.COLOR_BGR2RGB))
    plt.title("Warped Image 1")
    plt.show()